{
  "questions": [
    {
      "id": "babel-config",
      "type": "text",
      "question": "What is Babel and how do you configure it for a modern React application?",
      "answer": "Babel is a JavaScript compiler that transforms modern JS into backwards compatible code:\n- Configure via babel.config.js or .babelrc\n- Essential presets: @babel/preset-env, @babel/preset-react\n- Common plugins: @babel/plugin-transform-runtime\n- Polyfills handling through core-js\n- Integration with build tools like webpack or vite",
      "difficulty": "intermediate",
      "tags": ["configuration", "tooling"]
    },
    {
      "id": "babel-plugins",
      "type": "text",
      "question": "Explain how Babel plugins work and how to write a custom plugin",
      "answer": "Babel plugins transform code through AST manipulation:\n1. Parse phase: Code → AST\n2. Transform phase: Plugins modify AST\n3. Generate phase: AST → Code\n\nCustom plugins use visitor pattern to traverse and modify nodes. Common use cases include:\n- Custom syntax transforms\n- Code instrumentation\n- Development tools",
      "difficulty": "advanced",
      "tags": ["plugins", "ast"]
    },
    {
      "id": "babel-polyfills",
      "type": "multiple-choice",
      "question": "What's the recommended way to include polyfills in a Babel setup?",
      "options": [
        "@babel/polyfill (deprecated)",
        "core-js/stable and regenerator-runtime/runtime",
        "babel-polyfill",
        "Include them manually in your entry file"
      ],
      "correctAnswer": 1,
      "explanation": "core-js/stable and regenerator-runtime/runtime is the modern approach because:\n- More granular imports\n- Better tree-shaking\n- Automatic version management\n- Supports modern JavaScript features\n- Recommended by Babel team",
      "difficulty": "intermediate",
      "tags": ["polyfills", "configuration"]
    },
    {
      "id": "babel-presets",
      "type": "text",
      "question": "What are Babel presets and how do they differ from plugins?",
      "answer": "Babel presets are collections of plugins that support particular language features or frameworks:\n\nKey differences:\n1. Presets:\n- Pre-configured set of plugins\n- Common use cases (e.g., React, TypeScript)\n- Can include configuration options\n- Applied in reverse order\n\n2. Plugins:\n- Individual transformations\n- More granular control\n- Applied in order specified\n- Can be custom-written\n\nCommon presets:\n- @babel/preset-env\n- @babel/preset-react\n- @babel/preset-typescript",
      "difficulty": "intermediate",
      "tags": ["presets", "configuration"]
    },
    {
      "id": "babel-runtime",
      "type": "multiple-choice",
      "question": "What is the purpose of @babel/plugin-transform-runtime?",
      "options": [
        "To reduce bundle size and prevent global scope pollution",
        "To speed up babel compilation",
        "To add more polyfills",
        "To transform async/await only"
      ],
      "correctAnswer": 0,
      "explanation": "@babel/plugin-transform-runtime:\n- Prevents duplication of helper functions\n- Keeps the global scope clean\n- Provides a sandboxed environment\n- Enables reuse of Babel's injected helper code\n- Reduces the overall bundle size",
      "difficulty": "advanced",
      "tags": ["plugins", "optimization"]
    },
    {
      "id": "babel-targets",
      "type": "text",
      "question": "How do you configure browser targets in Babel and what are the implications?",
      "answer": "Browser targets in Babel can be configured through browserlist or direct targets:\n\n1. Browserlist config:\n```\n{\n  \"targets\": \"> 0.25%, not dead\"\n}\n```\n\n2. Direct targets:\n```\n{\n  \"targets\": {\n    \"chrome\": \"58\",\n    \"ie\": \"11\"\n  }\n}\n```\n\nImplications:\n- Affects polyfill inclusion\n- Impacts code transformation\n- Bundle size considerations\n- Performance trade-offs",
      "difficulty": "intermediate",
      "tags": ["configuration", "browser-support"]
    },
    {
      "id": "babel-macros",
      "type": "multiple-choice",
      "question": "What is babel-plugin-macros used for?",
      "options": [
        "To enable compile-time code transformation without babel config",
        "To add runtime polyfills",
        "To minify code",
        "To handle CSS-in-JS"
      ],
      "correctAnswer": 0,
      "explanation": "babel-plugin-macros allows:\n- Zero-config code transformation\n- Explicit transformation through imports\n- Compile-time code generation\n- Popular with styled-components, preval, and graphql\n- More transparent than traditional babel plugins",
      "difficulty": "advanced",
      "tags": ["macros", "optimization"]
    }
  ]
}