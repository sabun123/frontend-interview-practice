{
  "questions": [
    {
      "id": "typescript-types",
      "type": "text",
      "question": "What are the differences between interfaces and types in TypeScript?",
      "answer": "Interfaces and types have several key differences:\n- Interfaces are extensible through declaration merging, types are not\n- Interfaces can only describe object shapes, while types can also define unions, primitives, and tuples\n- Types are more flexible for complex types like mapped types and conditional types\n- Interfaces are generally preferred when defining object shapes for better error messages",
      "difficulty": "intermediate",
      "tags": ["types", "interfaces"]
    },
    {
      "id": "generics",
      "type": "text",
      "question": "Explain TypeScript generics and their use cases",
      "answer": "Generics allow you to write flexible, reusable code that works with multiple types while maintaining type safety. Common use cases include:\n- Creating type-safe collections\n- Building flexible components that work with different data types\n- Writing utility functions that preserve type information\n- Implementing generic interfaces and classes",
      "difficulty": "intermediate",
      "tags": ["generics", "type-safety"]
    },
    {
      "id": "utility-types",
      "type": "multiple-choice",
      "question": "Which TypeScript utility type would you use to make all properties of an interface optional?",
      "options": [
        "Partial<T>",
        "Optional<T>",
        "Maybe<T>",
        "Required<T>"
      ],
      "correctAnswer": 0,
      "explanation": "Partial<T> makes all properties of type T optional by adding ? to each property. For example: Partial<User> would make every property in the User interface optional.",
      "difficulty": "intermediate",
      "tags": ["utility-types", "type-manipulation"]
    },
    {
      "id": "type-narrowing",
      "type": "text",
      "question": "Explain type narrowing in TypeScript and list different ways to achieve it.",
      "answer": "Type narrowing is the process of refining types to more specific ones. Common ways to narrow types:\n\n1. Type Guards:\n- typeof checks\n- instanceof checks\n- in operator\n- Custom type predicates (is functions)\n\n2. Equality Narrowing:\nif (x === 'specific value')\n\n3. Discriminated Unions:\nusing a 'type' property to distinguish union members\n\n4. Assert Functions:\nfunctions that throw if condition isn't met",
      "difficulty": "advanced",
      "tags": ["type-guards", "type-safety"]
    },
    {
      "id": "mapped-types",
      "type": "multiple-choice",
      "question": "What is the purpose of mapped types in TypeScript?",
      "options": [
        "To transform every property in a type according to a rule",
        "To merge multiple types into one",
        "To convert JavaScript types to TypeScript",
        "To map interfaces to classes"
      ],
      "correctAnswer": 0,
      "explanation": "Mapped types allow you to create new types based on existing ones by transforming each property according to a rule. Example:\ntype Readonly<T> = { readonly [P in keyof T]: T[P] };\nThis creates a new type with all properties marked as readonly.",
      "difficulty": "advanced",
      "tags": ["mapped-types", "type-manipulation"]
    },
    {
      "id": "decorators",
      "type": "text",
      "question": "Explain TypeScript decorators and their common use cases.",
      "answer": "Decorators are special declarations that can modify classes, methods, properties, or parameters. Common use cases:\n\n1. Class Decorators:\n- Adding metadata\n- Modifying constructor behavior\n- Implementing patterns like singleton\n\n2. Method Decorators:\n- Logging\n- Performance monitoring\n- Access control\n- Method overriding\n\n3. Property Decorators:\n- Validation\n- Computed properties\n- Dependency injection\n\nExample:\n@injectable()\nclass Service {\n  @log()\n  method() {}\n}",
      "difficulty": "advanced",
      "tags": ["decorators", "metadata"]
    },
    {
      "id": "conditional-types",
      "type": "multiple-choice",
      "question": "What is the purpose of the infer keyword in TypeScript conditional types?",
      "options": [
        "To extract type information from another type",
        "To create new types at runtime",
        "To import types from external modules",
        "To inherit from parent types"
      ],
      "correctAnswer": 0,
      "explanation": "The infer keyword is used in conditional types to extract and capture type information. Example:\ntype ReturnType<T> = T extends (...args: any[]) => infer R ? R : any;\nHere, infer R captures the return type of the function type.",
      "difficulty": "advanced",
      "tags": ["conditional-types", "type-inference"]
    }
  ]
}